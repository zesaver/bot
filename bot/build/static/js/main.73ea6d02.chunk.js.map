{"version":3,"sources":["Form/Form.module.css","Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","state","userid","text","selectedFile","responseServer","responseError","handleChange","target","name","value","setState","onChangeHandler","event","files","handleSubmit","e","preventDefault","data","FormData","append","axios","method","url","headers","accept","then","response","console","log","catch","error","this","className","CSS","revervePlaceText","closeModalButton","onClick","props","onClose","successMail","onSubmit","from","formGroup","type","placeholder","onChange","textarea","button","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,iBAAmB,+BAA+B,iBAAmB,+BAA+B,YAAc,0BAA0B,KAAO,mBAAmB,UAAY,wBAAwB,SAAW,uBAAuB,OAAS,uB,6MCGlPC,E,4MACnBC,MAAQ,CACNC,OAAQ,GACRC,KAAM,GACNC,aAAc,KACdC,eAAgB,KAChBC,cAAe,M,EAEjBC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKC,SAAL,eAAiBF,EAAOC,K,EAE1BE,gBAAkB,SAACC,GACjB,EAAKF,SAAS,CACZP,aAAcS,EAAML,OAAOM,MAAM,M,EAGrCC,aAAe,SAACC,GAAO,IAAD,EACK,EAAKf,MAAtBC,EADY,EACZA,OADY,EACJC,KAChBa,EAAEC,iBACF,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAKnB,MAAMG,cAC/Bc,EAAKE,OAAO,SAAUlB,GAEtBmB,IAAM,CACJC,OAAQ,OACRC,IAAK,eACLL,OACAM,QAAS,CACPC,OAAQ,mBACR,eAAe,0BAGhBC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,EAAKhB,SAAS,CAAEN,eAAgBsB,EAAST,OACzC,EAAKP,SAAS,CAAET,OAAQ,GAAIC,KAAM,QAEnC2B,OAAM,SAACC,GACFA,GACF,EAAKpB,SAAS,CACZL,cAAe,mP,uDAKf,IAAD,EACiD0B,KAAK/B,MAArDC,EADD,EACCA,OAAQC,EADT,EACSA,KAAME,EADf,EACeA,eAAgBC,EAD/B,EAC+BA,cACtC,OACE,oCACE,yBAAK2B,UAAWC,IAAIC,kBAClB,4BAAQF,UAAWC,IAAIE,iBAAkBC,QAASL,KAAKM,MAAMC,SAA7D,KAICjC,GAAiB,2BAAIA,IAGvBD,EACC,uBAAG4B,UAAWC,IAAIM,aAAcnC,GAEhC,0BAAMoC,SAAUT,KAAKjB,aAAckB,UAAWC,IAAIQ,MAChD,2BACET,UAAWC,IAAIS,UACfC,KAAK,OACLnC,KAAK,SACLC,MAAOR,EACP2C,YAAY,UAEZC,SAAUd,KAAKzB,eAEjB,8BACE0B,UAAS,UAAKC,IAAIS,UAAT,YAAsBT,IAAIa,UACnCtC,KAAK,OACLC,MAAOP,EACP0C,YAAY,aAEZC,SAAUd,KAAKzB,eAEjB,2BACE0B,UAAWC,IAAIS,UACfC,KAAK,OACLnC,KAAK,OACLqC,SAAUd,KAAKpB,kBAGjB,4BAAQqB,UAAS,UAAKC,IAAIS,UAAT,YAAsBT,IAAIc,QAAUJ,KAAK,UAA1D,sB,GAtFsBK,aCQnBC,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMmC,c","file":"static/js/main.73ea6d02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"revervePlaceText\":\"Form_revervePlaceText__1NHkv\",\"closeModalButton\":\"Form_closeModalButton__1LSjA\",\"successMail\":\"Form_successMail__Gtkq8\",\"from\":\"Form_from__2uBk0\",\"formGroup\":\"Form_formGroup__3pN4R\",\"textarea\":\"Form_textarea__3R3JM\",\"button\":\"Form_button__2X5Uf\"};","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CSS from \"./Form.module.css\";\n\nexport default class Form extends Component {\n  state = {\n    userid: \"\",\n    text: \"\",\n    selectedFile: null,\n    responseServer: null,\n    responseError: null,\n  };\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n  onChangeHandler = (event) => {\n    this.setState({\n      selectedFile: event.target.files[0],\n    });\n  };\n  handleSubmit = (e) => {\n    const { userid, text } = this.state;\n    e.preventDefault();\n    const data = new FormData();\n    data.append(\"file\", this.state.selectedFile);\n    data.append(\"userid\", userid);\n\n    axios({\n      method: \"post\",\n      url: \"/sendmessage\",\n      data,\n      headers: {\n        accept: \"application/json\",\n        \"Content-Type\": `multipart/form-data;`,\n      },\n    })\n      .then((response) => {\n        console.log(response);\n        this.setState({ responseServer: response.data });\n        this.setState({ userid: \"\", text: \"\" });\n      })\n      .catch((error) => {\n        if (error)\n          this.setState({\n            responseError: \"Что-то пошло не так, увы письмо не отправилось :(\",\n          });\n      });\n  };\n\n  render() {\n    const { userid, text, responseServer, responseError } = this.state;\n    return (\n      <>\n        <div className={CSS.revervePlaceText}>\n          <button className={CSS.closeModalButton} onClick={this.props.onClose}>\n            X\n          </button>\n\n          {responseError && <p>{responseError}</p>}\n        </div>\n\n        {responseServer ? (\n          <p className={CSS.successMail}>{responseServer}</p>\n        ) : (\n          <form onSubmit={this.handleSubmit} className={CSS.from}>\n            <input\n              className={CSS.formGroup}\n              type=\"text\"\n              name=\"userid\"\n              value={userid}\n              placeholder=\"user ID\"\n              // required\n              onChange={this.handleChange}\n            />\n            <textarea\n              className={`${CSS.formGroup} ${CSS.textarea}`}\n              name=\"text\"\n              value={text}\n              placeholder=\"Message...\"\n              // required\n              onChange={this.handleChange}\n            ></textarea>\n            <input\n              className={CSS.formGroup}\n              type=\"file\"\n              name=\"file\"\n              onChange={this.onChangeHandler}\n            />\n\n            <button className={`${CSS.formGroup} ${CSS.button}`} type=\"submit\">\n              Send message\n            </button>\n          </form>\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Form from \"./Form/Form\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}